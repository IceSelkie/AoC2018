package aoc2018.day10;

import aoc2018.day7.TheSumOfItsParts;

import static java.lang.Math.max;
import static java.lang.Math.min;

public class TheStarsAlign
{
  public static void main(String[] args)
  {
    Object[] input = new Object[]{p(p(-42601, -53357), p(4, 5)), p(p(10946, 43042), p(-1, -4)), p(p(21657, 32332), p(-2, -3)), p(p(-42617, 53749), p(4, -5)), p(p(-21225, -53349), p(2, 5)), p(p(10929, -42647), p(-1, 4)), p(p(53758, 43040), p(-5, -4)), p(p(53745, 21622), p(-5, -2)), p(p(-42602, 32332), p(4, -3)), p(p(53741, -42644), p(-5, 4)), p(p(10918, 21622), p(-1, -2)), p(p(43075, -31929), p(-4, 3)), p(p(32320, 21617), p(-3, -2)), p(p(-31914, 32330), p(3, -3)), p(p(-53311, -42645), p(5, 4)), p(p(-10491, 10911), p(1, -1)), p(p(21628, -21224), p(-2, 2)), p(p(-53355, -31932), p(5, 3)), p(p(21644, 32323), p(-2, -3)), p(p(10925, -53353), p(-1, 5)), p(p(43039, 32329), p(-4, -3)), p(p(-31919, -31933), p(3, 3)), p(p(-10502, -10513), p(1, 1)), p(p(21659, -53353), p(-2, 5)), p(p(-42609, -21225), p(4, 2)), p(p(-21181, 43041), p(2, -4)), p(p(-21201, 21622), p(2, -2)), p(p(-31911, -42638), p(3, 4)), p(p(-31919, -31930), p(3, 3)), p(p(-42596, -31937), p(4, 3)), p(p(53737, -42639), p(-5, 4)), p(p(43072, -10509), p(-4, 1)), p(p(-10467, -31929), p(1, 3)), p(p(53789, -42646), p(-5, 4)), p(p(-53311, -42639), p(5, 4)), p(p(32373, -42643), p(-3, 4)), p(p(21618, 43038), p(-2, -4)), p(p(-53342, 10905), p(5, -1)), p(p(10918, 43039), p(-1, -4)), p(p(-42621, 43034), p(4, -4)), p(p(-42624, 43041), p(4, -4)), p(p(-10487, 43039), p(1, -4)), p(p(53749, 43039), p(-5, -4)), p(p(10916, 53743), p(-1, -5)), p(p(-10486, 43034), p(1, -4)), p(p(53761, -42644), p(-5, 4)), p(p(32351, -10512), p(-3, 1)), p(p(-31916, 32332), p(3, -3)), p(p(53754, 43034), p(-5, -4)), p(p(21631, -42638), p(-2, 4)), p(p(32344, -10513), p(-3, 1)), p(p(21655, 43041), p(-2, -4)), p(p(10958, -31929), p(-1, 3)), p(p(43061, 32327), p(-4, -3)), p(p(32373, -31933), p(-3, 3)), p(p(-53305, -31928), p(5, 3)), p(p(-53327, -42641), p(5, 4)), p(p(-21221, -10513), p(2, 1)), p(p(32369, 53745), p(-3, -5)), p(p(-21204, -53352), p(2, 5)), p(p(10921, -42642), p(-1, 4)), p(p(-53307, -10512), p(5, 1)), p(p(53798, 10904), p(-5, -1)), p(p(-53336, 32327), p(5, -3)), p(p(-21177, 21616), p(2, -2)), p(p(21623, 21616), p(-2, -2)), p(p(32351, 10907), p(-3, -1)), p(p(-53350, 21621), p(5, -2)), p(p(32346, -21224), p(-3, 2)), p(p(32335, 21613), p(-3, -2)), p(p(-42652, 21622), p(4, -2)), p(p(43035, 32327), p(-4, -3)), p(p(-10471, -31937), p(1, 3)), p(p(53772, 32327), p(-5, -3)), p(p(-21225, 32329), p(2, -3)), p(p(43051, 53747), p(-4, -5)), p(p(10934, -31929), p(-1, 3)), p(p(-10467, 32330), p(1, -3)), p(p(-10502, 10912), p(1, -1)), p(p(32341, 32332), p(-3, -3)), p(p(10908, -53353), p(-1, 5)), p(p(21623, -42644), p(-2, 4)), p(p(-10478, 32323), p(1, -3)), p(p(21620, -53355), p(-2, 5)), p(p(21627, 21614), p(-2, -2)), p(p(-21192, 10906), p(2, -1)), p(p(21631, -53350), p(-2, 5)), p(p(10930, -10514), p(-1, 1)), p(p(53789, -42643), p(-5, 4)), p(p(32335, 10908), p(-3, -1)), p(p(10930, 32330), p(-1, -3)), p(p(53748, -21227), p(-5, 2)), p(p(43080, -10517), p(-4, 1)), p(p(32358, 32329), p(-3, -3)), p(p(-42601, -10512), p(4, 1)), p(p(21666, 43033), p(-2, -4)), p(p(-10515, 53747), p(1, -5)), p(p(-53352, 53743), p(5, -5)), p(p(-42616, 53752), p(4, -5)), p(p(-10513, -53353), p(1, 5)), p(p(-10487, 32326), p(1, -3)), p(p(10954, 43042), p(-1, -4)), p(p(53753, 43042), p(-5, -4)), p(p(-10487, 10906), p(1, -1)), p(p(-10515, -53348), p(1, 5)), p(p(53761, -21225), p(-5, 2)), p(p(10913, -42639), p(-1, 4)), p(p(-21217, -10511), p(2, 1)), p(p(21623, 21620), p(-2, -2)), p(p(53763, -21227), p(-5, 2)), p(p(43043, -21225), p(-4, 2)), p(p(53746, -31933), p(-5, 3)), p(p(-31943, -31937), p(3, 3)), p(p(21608, 53743), p(-2, -5)), p(p(-53344, -10512), p(5, 1)), p(p(43048, -42641), p(-4, 4)), p(p(-21225, -53350), p(2, 5)), p(p(53758, -31933), p(-5, 3)), p(p(43079, 32329), p(-4, -3)), p(p(21636, -31931), p(-2, 3)), p(p(21611, -31937), p(-2, 3)), p(p(-10471, -10511), p(1, 1)), p(p(-42616, 53752), p(4, -5)), p(p(43036, 32323), p(-4, -3)), p(p(-10466, -31937), p(1, 3)), p(p(-42609, -10510), p(4, 1)), p(p(53773, -21224), p(-5, 2)), p(p(-10507, -10515), p(1, 1)), p(p(-42632, -31930), p(4, 3)), p(p(-21190, 32328), p(2, -3)), p(p(-53338, -42647), p(5, 4)), p(p(53741, 10906), p(-5, -1)), p(p(-53305, -10517), p(5, 1)), p(p(-31885, -10517), p(3, 1)), p(p(-10523, 53752), p(1, -5)), p(p(21611, 10906), p(-2, -1)), p(p(-31892, 32323), p(3, -3)), p(p(32318, 32332), p(-3, -3)), p(p(-42632, -53348), p(4, 5)), p(p(10918, 43037), p(-1, -4)), p(p(-31903, 53744), p(3, -5)), p(p(-53318, 21622), p(5, -2)), p(p(43037, 32323), p(-4, -3)), p(p(-10499, -53356), p(1, 5)), p(p(-10504, -31932), p(1, 3)), p(p(43075, 10910), p(-4, -1)), p(p(43068, -10510), p(-4, 1)), p(p(-10499, -21220), p(1, 2)), p(p(-42650, -10508), p(4, 1)), p(p(-31892, -31928), p(3, 3)), p(p(-21189, 43036), p(2, -4)), p(p(43076, 53752), p(-4, -5)), p(p(-42620, 21615), p(4, -2)), p(p(-21177, 32330), p(2, -3)), p(p(10937, 43033), p(-1, -4)), p(p(-31898, 21614), p(3, -2)), p(p(53739, 10912), p(-5, -1)), p(p(-21206, -53353), p(2, 5)), p(p(-21228, 21613), p(2, -2)), p(p(21609, -31932), p(-2, 3)), p(p(-42613, 21622), p(4, -2)), p(p(-21177, -53351), p(2, 5)), p(p(-21207, 21622), p(2, -2)), p(p(53761, -10508), p(-5, 1)), p(p(53740, -31937), p(-5, 3)), p(p(53756, -31937), p(-5, 3)), p(p(-21192, -21220), p(2, 2)), p(p(-21174, 43033), p(2, -4)), p(p(-10511, -53351), p(1, 5)), p(p(10900, -42647), p(-1, 4)), p(p(-53352, 21618), p(5, -2)), p(p(53798, 10904), p(-5, -1)), p(p(43079, -53350), p(-4, 5)), p(p(-10498, -21218), p(1, 2)), p(p(10909, 10910), p(-1, -1)), p(p(-42613, 32331), p(4, -3)), p(p(-42644, -21227), p(4, 2)), p(p(-10510, -42645), p(1, 4)), p(p(-53334, -21225), p(5, 2)), p(p(10918, 53745), p(-1, -5)), p(p(21633, 53747), p(-2, -5)), p(p(-21205, -21223), p(2, 2)), p(p(21640, -10511), p(-2, 1)), p(p(-10503, 10908), p(1, -1)), p(p(-53322, -10515), p(5, 1)), p(p(43076, 43042), p(-4, -4)), p(p(-53312, -53348), p(5, 5)), p(p(32333, 10911), p(-3, -1)), p(p(53761, 32323), p(-5, -3)), p(p(-21173, 21622), p(2, -2)), p(p(10918, -21219), p(-1, 2)), p(p(43069, -53352), p(-4, 5)), p(p(-42608, 21621), p(4, -2)), p(p(-31938, 53752), p(3, -5)), p(p(-42653, -21220), p(4, 2)), p(p(10905, -10511), p(-1, 1)), p(p(-21204, 43038), p(2, -4)), p(p(10925, -31937), p(-1, 3)), p(p(53781, 53746), p(-5, -5)), p(p(-31906, -31937), p(3, 3)), p(p(10929, 10912), p(-1, -1)), p(p(-53346, 21618), p(5, -2)), p(p(-31919, 21618), p(3, -2)), p(p(43083, -21225), p(-4, 2)), p(p(43027, -42639), p(-4, 4)), p(p(-31916, 53752), p(3, -5)), p(p(32333, -10512), p(-3, 1)), p(p(-10487, 32330), p(1, -3)), p(p(43056, 53751), p(-4, -5)), p(p(-21189, -53351), p(2, 5)), p(p(32333, -31932), p(-3, 3)), p(p(10905, -21227), p(-1, 2)), p(p(53795, -31937), p(-5, 3)), p(p(-10490, 43040), p(1, -4)), p(p(21647, 21613), p(-2, -2)), p(p(21616, 10907), p(-2, -1)), p(p(-10499, 10905), p(1, -1)), p(p(-21232, 53749), p(2, -5)), p(p(-42645, -31933), p(4, 3)), p(p(-31927, 43037), p(3, -4)), p(p(-31942, -31937), p(3, 3)), p(p(21620, -53348), p(-2, 5)), p(p(43054, -42647), p(-4, 4)), p(p(32329, -42640), p(-3, 4)), p(p(-10486, -21227), p(1, 2)), p(p(10929, -10509), p(-1, 1)), p(p(43051, -31934), p(-4, 3)), p(p(21666, -42638), p(-2, 4)), p(p(-21228, 32324), p(2, -3)), p(p(-31899, 21615), p(3, -2)), p(p(32338, -42644), p(-3, 4)), p(p(-42624, -31931), p(4, 3)), p(p(-53319, -21224), p(5, 2)), p(p(-31911, 43033), p(3, -4)), p(p(-42608, 53752), p(4, -5)), p(p(43064, -31929), p(-4, 3)), p(p(-53350, 32332), p(5, -3)), p(p(-21212, 21618), p(2, -2)), p(p(21620, 43034), p(-2, -4)), p(p(-31887, -42645), p(3, 4)), p(p(53738, 10909), p(-5, -1)), p(p(43067, 43042), p(-4, -4)), p(p(21643, 43040), p(-2, -4)), p(p(-31924, 32323), p(3, -3)), p(p(10930, 53745), p(-1, -5)), p(p(43027, 43042), p(-4, -4)), p(p(10917, -21226), p(-1, 2)), p(p(-53363, 10912), p(5, -1)), p(p(-10502, 32328), p(1, -3)), p(p(53749, -42647), p(-5, 4)), p(p(-42597, -31932), p(4, 3)), p(p(-10522, 43039), p(1, -4)), p(p(10907, 10907), p(-1, -1)), p(p(53755, 21618), p(-5, -2)), p(p(10941, -53355), p(-1, 5)), p(p(43087, 53743), p(-4, -5)), p(p(-53355, -31930), p(5, 3)), p(p(53740, -21227), p(-5, 2)), p(p(-42628, -21223), p(4, 2)), p(p(43029, -42647), p(-4, 4)), p(p(-10518, 32324), p(1, -3)), p(p(-21204, 43038), p(2, -4)), p(p(-31891, -53353), p(3, 5)), p(p(21636, 10904), p(-2, -1)), p(p(-21217, 10909), p(2, -1)), p(p(-42651, -42647), p(4, 4)), p(p(10950, 32323), p(-1, -3)), p(p(-10512, -21227), p(1, 2)), p(p(-31933, 43037), p(3, -4)), p(p(-42624, -10515), p(4, 1)), p(p(10949, 10908), p(-1, -1)), p(p(32325, 32329), p(-3, -3)), p(p(10942, -21226), p(-1, 2)), p(p(53798, 43034), p(-5, -4)), p(p(10930, 32326), p(-1, -3)), p(p(10898, 21622), p(-1, -2)), p(p(43080, 10903), p(-4, -1)), p(p(43027, -42639), p(-4, 4)), p(p(10949, 43036), p(-1, -4)), p(p(10926, -31936), p(-1, 3)), p(p(21628, -21222), p(-2, 2)), p(p(10949, -31934), p(-1, 3)), p(p(10923, -53357), p(-1, 5)), p(p(-53346, 32324), p(5, -3)), p(p(-21193, 21614), p(2, -2)), p(p(-10467, 32326), p(1, -3)), p(p(-53331, 43034), p(5, -4)), p(p(32325, -42646), p(-3, 4)), p(p(21620, 53745), p(-2, -5)), p(p(10902, -21225), p(-1, 2)), p(p(43060, 10905), p(-4, -1)), p(p(-53339, -10516), p(5, 1)), p(p(-42644, 10903), p(4, -1)), p(p(43069, -53353), p(-4, 5)), p(p(21663, -42643), p(-2, 4)), p(p(10949, 10908), p(-1, -1)), p(p(53796, -21227), p(-5, 2)), p(p(-10515, -31934), p(1, 3)), p(p(10897, -31937), p(-1, 3)), p(p(53745, 43034), p(-5, -4)), p(p(10937, 43033), p(-1, -4)), p(p(-53319, 10910), p(5, -1)), p(p(-53346, -53356), p(5, 5)), p(p(-31938, 43033), p(3, -4)), p(p(-31940, -31933), p(3, 3)), p(p(53779, -31933), p(-5, 3)), p(p(-42629, 10903), p(4, -1)), p(p(-21205, -21218), p(2, 2)), p(p(-31900, 32327), p(3, -3)), p(p(10900, -10508), p(-1, 1)), p(p(-42632, 43040), p(4, -4)), p(p(-31933, 21613), p(3, -2)), p(p(-10495, -31933), p(1, 3)), p(p(-42627, 10903), p(4, -1)), p(p(-42629, -21226), p(4, 2)), p(p(-42626, -42638), p(4, 4)), p(p(10921, -21225), p(-1, 2)), p(p(43039, 21620), p(-4, -2)), p(p(21647, 43041), p(-2, -4)), p(p(21626, 43038), p(-2, -4)), p(p(43062, 32328), p(-4, -3)), p(p(-21229, -21218), p(2, 2)), p(p(43031, -53348), p(-4, 5)), p(p(43060, 21620), p(-4, -2)), p(p(-53312, 32323), p(5, -3)), p(p(-42626, -42647), p(4, 4)), p(p(43059, 32323), p(-4, -3)), p(p(-31940, -21218), p(3, 2)), p(p(53753, -10514), p(-5, 1)), p(p(32349, -10516), p(-3, 1)), p(p(32341, 32331), p(-3, -3)), p(p(43048, -21219), p(-4, 2)), p(p(10941, -10510), p(-1, 1)), p(p(43035, 10903), p(-4, -1)), p(p(10942, -21219), p(-1, 2)), p(p(21652, -42638), p(-2, 4)), p(p(-53351, 21617), p(5, -2)), p(p(-21213, 10904), p(2, -1)), p(p(-53355, -21225), p(5, 2)), p(p(-21193, -10508), p(2, 1)), p(p(43035, 53743), p(-4, -5)), p(p(-42628, 53747), p(4, -5)), p(p(53750, -31934), p(-5, 3)), p(p(53778, 53750), p(-5, -5)), p(p(-53338, 32323), p(5, -3)), p(p(-53358, -31937), p(5, 3)), p(p(21663, -31936), p(-2, 3)), p(p(-21209, 43037), p(2, -4)), p(p(-10467, 32328), p(1, -3)), p(p(-21173, 21613), p(2, -2)), p(p(10899, 10908), p(-1, -1)), p(p(-31935, -31932), p(3, 3)), p(p(21643, -42640), p(-2, 4)), p(p(21651, 43039), p(-2, -4)), p(p(-42628, 21622), p(4, -2)), p(p(10926, -10515), p(-1, 1)), p(p(32335, 43038), p(-3, -4)), p(p(53773, 10905), p(-5, -1)), p(p(-31939, -53357), p(3, 5)), p(p(-42643, 53743), p(4, -5)), p(p(-21199, 21617), p(2, -2)), p(p(-10499, -31931), p(1, 3))};
    TheSumOfItsParts.Pair<Integer, Integer> range = p(Integer.MAX_VALUE, Integer.MAX_VALUE);
    int t = 0;
    while (true)
    {
      tick(input);
      t++;
      if (rmin(range(input)) == 10)
      {
        System.out.println("Part 1:");
        display(input);
        System.out.println();
        System.out.println("Part 2: " + t);
        break;
      }
    }
  }

  private static int rmax(int[] range)
  {
    return max(range[2] - range[0], range[3] - range[1]) + 1;
  }

  private static int rmin(int[] range)
  {
    return min(range[2] - range[0], range[3] - range[1]) + 1;
  }

  private static void display(Object[] input)
  {
    int[] range = range(input);
    for (int j = range[1]; j <= range[3]; j++)
    {
      for (int i = range[0]; i <= range[2]; i++)
        System.out.print(contains(input, p(i, j)) ? "*" : " ");
      System.out.println();
    }

  }

  private static boolean contains(Object[] input, TheSumOfItsParts.Pair<Integer, Integer> p)
  {
    for (Object o : input)
    {
      TheSumOfItsParts.Pair<TheSumOfItsParts.Pair<Integer, Integer>, TheSumOfItsParts.Pair<Integer, Integer>> v = (TheSumOfItsParts.Pair<TheSumOfItsParts.Pair<Integer, Integer>, TheSumOfItsParts.Pair<Integer, Integer>>)o;
      if (v.a.a.equals(p.a) && v.a.b.equals(p.b))
        return true;
    }
    return false;
  }

  private static int[] range(Object[] input)
  {
    int[] ret = new int[]{Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MIN_VALUE, Integer.MIN_VALUE};
    for (Object o : input)
    {
      TheSumOfItsParts.Pair<TheSumOfItsParts.Pair<Integer, Integer>, TheSumOfItsParts.Pair<Integer, Integer>> v = (TheSumOfItsParts.Pair<TheSumOfItsParts.Pair<Integer, Integer>, TheSumOfItsParts.Pair<Integer, Integer>>)o;
      ret[0] = min(v.a.a, ret[0]);
      ret[1] = min(v.a.b, ret[1]);
      ret[2] = max(v.a.a, ret[2]);
      ret[3] = max(v.a.b, ret[3]);
    }
    return ret;
  }

  private static void tick(Object[] input)
  {
    for (Object o : input)
    {
      TheSumOfItsParts.Pair<TheSumOfItsParts.Pair<Integer, Integer>, TheSumOfItsParts.Pair<Integer, Integer>> v = (TheSumOfItsParts.Pair<TheSumOfItsParts.Pair<Integer, Integer>, TheSumOfItsParts.Pair<Integer, Integer>>)o;
      v.a.a += v.b.a;
      v.a.b += v.b.b;
    }
  }

  public static class Pair<T, U>
  {
    public T a;
    public U b;

    public Pair(T a, U b)
    {
      this.a = a;
      this.b = b;
    }
  }

  public static TheSumOfItsParts.Pair<Integer, Integer> p(int a, int b)
  {
    return new TheSumOfItsParts.Pair<Integer, Integer>(a, b);
  }

  public static TheSumOfItsParts.Pair<TheSumOfItsParts.Pair<Integer, Integer>, TheSumOfItsParts.Pair<Integer, Integer>> p(TheSumOfItsParts.Pair<Integer, Integer> a, TheSumOfItsParts.Pair<Integer, Integer> b)
  {
    return new TheSumOfItsParts.Pair<TheSumOfItsParts.Pair<Integer, Integer>, TheSumOfItsParts.Pair<Integer, Integer>>(a, b);
  }
}
